from __future__ import annotations

from typing import Optional, List, Literal
from datetime import datetime

from pydantic import BaseModel, Field, ConfigDict, model_validator


class TargetBase(BaseModel):
    """Base schema for Target model (plugin-based only)."""

    name: str = Field(..., description="Human-readable name for the target")
    # Slug is always generated by the backend from the name
    # Plugin-first (required)
    plugin_name: Optional[str] = Field(
        None, description="Plugin key, e.g., 'pihole'"
    )
    plugin_config_json: Optional[str] = Field(
        None, description="Plugin configuration JSON"
    )

    @model_validator(mode="after")
    def _validate_mode(self) -> "TargetBase":
        # Enforce plugin-based creation only
        if not self.plugin_name:
            raise ValueError("plugin_name is required")
        if not self.plugin_config_json:
            raise ValueError("plugin_config_json is required when plugin_name is provided")
        return self


class TargetCreate(TargetBase):
    """Schema for creating a new Target."""
    pass


class TargetUpdate(BaseModel):
    """Schema for updating a Target."""

    name: Optional[str] = Field(
        None, description="Human-readable name for the target"
    )
    slug: Optional[str] = Field(
        None, description="URL-friendly identifier for the target"
    )
    plugin_name: Optional[str] = Field(
        None, description="Plugin key, e.g., 'pihole'"
    )
    plugin_config_json: Optional[str] = Field(
        None, description="Plugin configuration JSON"
    )


class Target(BaseModel):
    """Schema for Target responses (no legacy fields)."""

    id: int = Field(..., description="Unique identifier")
    name: str
    slug: str
    plugin_name: Optional[str] = None
    plugin_config_json: Optional[str] = None
    group_id: Optional[int] = None
    created_at: datetime = Field(..., description="Creation timestamp")
    updated_at: datetime = Field(
        ..., description="Last update timestamp"
    )

    model_config = ConfigDict(from_attributes=True)


class AddTagsToTarget(BaseModel):
    tag_names: List[str] = Field(
        ..., description="List of tag names to attach directly (create-if-missing)"
    )


class RemoveTagsFromTarget(BaseModel):
    tag_names: List[str] = Field(
        ..., description="List of tag names to remove (DIRECT origin only)"
    )


class TargetTagWithOrigin(BaseModel):
    tag: "Tag"
    origin: Literal["AUTO", "DIRECT", "GROUP"]
    source_group_id: Optional[int] = None


